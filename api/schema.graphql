enum TrendingPeriod {
    week
    day
}

scalar Date

input Filter {
    searchText: String
}

# TODO: Review Schema and refactor

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type MovieConnection {
    edges: [MovieEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
    page: Int!
    noOfPages: Int!
} 

interface PersonIdentifier {
    id: ID!
    name: String!
    imageUrl: String
}

type MoviePerson implements PersonIdentifier {
    id: ID!
    name: String!
    imageUrl: String
}

type MovieCredits {
    id: String!
    character: String!
    movie: Movie
}

type Person implements PersonIdentifier {
    id: ID!
    name: String!
    imageUrl: String
    biography: String
    birthDate: Date
    deathDate: Date
    placeOfBirth: String
    age: Int
    credits: [MovieCredits!]
}

type Cast {
    id: String!
    character: String!
    person: MoviePerson
}

type MovieEdge {
    node: Movie!
}

type Genre {
    id: ID!
    name: String!
}

type Certification {
    countryCode: String!
    certification: String!
}

type Crew {
    id: String!
    job: String
    name: String!
}

type MovieCredits {
    cast: [Cast!]
    crew: [Crew!]
}

type Movie {
    id: ID!
    title: String!
    overview: String!
    voteAverage: Float!
    voteCount: Int!
    releaseDate: Date
    originalLanguage: String!
    popularity: Float!
    imageUrl: String
    similar: [Movie!]
    recommended: [Movie!]
    credits: MovieCredits
    genres: [Genre!]
    runTime: Int
    homePage: String
    certifications: [Certification!]
}

type ImageConfiguration {
    baseUrl: String!
    imageSizes: [String!]!
}

type Query {
    imageConfiguration: ImageConfiguration
    search(imageSize: String = "original", page: Int = 1, filter: Filter!): MovieConnection
    trending(imageSize: String = "original", period: TrendingPeriod = day): [Movie!]!
    popular(imageSize: String = "original"): [Movie!]!
    movie(imageSize: String = "original", id: Int!, showCast: Boolean = true): Movie!
    person(imageSize: String = "original", id: Int!): Person!
}
